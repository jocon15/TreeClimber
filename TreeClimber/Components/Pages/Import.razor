@page "/import"

@inject IWebHostEnvironment Environment
@inject JSONFileDataService jsonFileDataService
@inject NavigationManager navManager

<PageTitle>Home</PageTitle>

<div>
    <h3 class="home-header">Import a JSON File</h3>
</div>

<text class="hint">@(BytesToKiloBytes(JSONFileDataService.MAX_FILE_SIZE))KB limit</text>
<div class="json-input-container">
    <InputFile OnChange="LoadFile" class="form-control" accept=".json"/>
</div>

@if (jsonFileDataService.GetFileContents() != null && jsonFileDataService.GetFileContents() == null)
{
    <Spinner />
}

@if (jsonFileDataService.GetFileContents() != null && jsonFileDataService.GetFileContents() != null && _errorMessage == "")
{
    <button class="add-btn" @onclick=@EditFile><PencilIcon Color="#fff" /> Edit File</button>
}

@if (_errorMessage != "")
{
    <ConditionalPageErrorMessage ErrorMessage=@_errorMessage />
}

@code {
    private string _errorMessage = "";

    private const int MAX_ALLOWED_FILES = 1;

    protected override void OnInitialized()
    {
        // clear JFDS of any previous data
        jsonFileDataService.Reset();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        // clear any existing error messages
        _errorMessage = "";

        List<IBrowserFile> loadedFiles = [];

        foreach (var file in e.GetMultipleFiles(MAX_ALLOWED_FILES))
        {
            try
            {
                await jsonFileDataService.SetFileAsync(file);
            }
            catch (Newtonsoft.Json.JsonReaderException)
            {
                _errorMessage = "File does not contain valid JSON!";
            }
            catch (Exception ex)
            {
                _errorMessage = ex.Message;
            }
        }
    }

    private void EditFile()
    {
        navManager.NavigateTo("/climb");
    }

    private long BytesToKiloBytes(long bytes) => bytes / (long)1000;
}