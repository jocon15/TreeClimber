@page "/"

@inject IWebHostEnvironment Environment
@inject JSONFileDataService jsonFileDataService
@inject NavigationManager navManager

<PageTitle>Home</PageTitle>

<div class="inline-header-container">
    <h3 class="home-header">Welcome to Tree Climber!</h3>
    <text class="hint inline-hint">v@_version</text>
</div>

<p>
    <text class="hint">10KB limit</text>
    <div>
        <InputFile OnChange="LoadFile" class="form-control" accept=".json"/>
    </div>
</p>

@if (jsonFileDataService.GetFileContents() != null && jsonFileDataService.GetFileContents() == null)
{
    <Spinner />
}

@if (jsonFileDataService.GetFileContents() != null && jsonFileDataService.GetFileContents() != null && _errorMessage == "")
{
    <button class="add-btn" @onclick=@EditFile><PencilIcon Color="#fff" /> Edit File</button>
}

@if (_errorMessage != "")
{
    <ConditionalPageErrorMessage ErrorMessage=@_errorMessage />
}

@code {
    private string _version = "0.1.0";

    private string _errorMessage = "";

    private const long MAX_FILE_SIZE = 10000; // ~500KB

    private const int MAX_ALLOWED_FILES = 1;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        // clear any existing error messages
        _errorMessage = "";

        List<IBrowserFile> loadedFiles = [];

        foreach (var file in e.GetMultipleFiles(MAX_ALLOWED_FILES))
        {
            if (file.Size > MAX_FILE_SIZE)
            {
                _errorMessage = $"File is over {BytesToKiloBytes(MAX_FILE_SIZE)}KB limit!";
                break;
            }

            try
            {
                await jsonFileDataService.SetDataAsync(file);
            }
            catch (Newtonsoft.Json.JsonReaderException)
            {
                _errorMessage = "File does not contain valid JSON!";
            }
            catch (Exception ex)
            {
                _errorMessage = ex.Message;
            }
        }
    }

    private void EditFile()
    {
        navManager.NavigateTo("/climb");
    }

    private long BytesToKiloBytes(long bytes) => bytes / (long)1000;
}