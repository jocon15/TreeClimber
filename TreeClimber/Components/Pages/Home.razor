@page "/"
@rendermode InteractiveServer

@inject IWebHostEnvironment Environment
@inject JSONFileDataService jsonFileDataService
@inject NavigationManager navManager

<PageTitle>Home</PageTitle>

<h3 class="climb-header">Import a JSON File</h3>

<p>
    <text class="hint">10MB limit</text>
    <div>
        <InputFile OnChange="LoadFiles" class="form-control" accept=".json"/>
    </div>
</p>

@if(_file != null && jsonFileDataService.GetFileContents() == null)
{
    <Spinner />
}

@if (_file != null && jsonFileDataService.GetFileContents() != null)
{
    <button class="add-btn" @onclick=@EditFile><PencilIcon Color="#fff" /> Edit File</button>
}

@if (_errorMessage != "")
{
    <ConditionalPageErrorMessage ErrorMessage=@_errorMessage />
}

@code {
    private List<IBrowserFile> loadedFiles = [];
    private IBrowserFile? _file;
    private long maxFileSize = 1024 * 10; // 1024 bytes in a kibibyte, * 238 ~= 250MB
    private int maxAllowedFiles = 1;
    private bool isLoading;

    private string _errorMessage = "";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        _errorMessage = "";
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                if (file.Size < maxFileSize)
                {
                    _file = file;
                    // load the contents into the JDS
                    await jsonFileDataService.SetDataAsync(_file);
                }
                else
                {
                    _errorMessage = "File too large!";
                }
            }
            catch (Exception ex)
            {
                _errorMessage = $"Error: {ex.Message}";
            }
        }

        // FIMXE: check for malformed files, invalid json, and file too large
    }

    private async Task EditFile()
    {
        navManager.NavigateTo("/climb");
    }
}