@page "/climb"

@inject JSONFileDataService jsonFileDataService
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject NavigationManager navManager

<PageTitle>Tree Climb</PageTitle>

@if (jsonFileDataService.GetFileContents() != null)
{
    <h3 class="climb-header">Editing File: @jsonFileDataService.GetFileName()</h3>

    @if (_isExpanded == true)
    {
        <button @onclick=@ToggleFolding class="secondary-btn"><ChevronRightIcon Color="#fff" /> Collapse All</button>
    }
    else
    {
        <button @onclick=@ToggleFolding class="secondary-btn"><ChevronDownIcon Color="#fff" /> Expand All</button>
    }

    <TreeRecursion JSONToken=@jsonFileDataService.GetFileContents() OnParentStateChange=@ParentStateChange />

    <ConditionalChangesMade ChangeCount=@jsonFileDataService.GetChangeCount() />

    <div class="climb-button-container">
        <button class="secondary-btn" @onclick=@UndoChanges><RestartIcon Color="#fff" /> Undo All Changes</button>
        <button class="add-btn" @onclick=@DownloadFile><DownloadIcon Color="#fff" /> Download File</button>
    </div>
}
else
{
    <TreeLoading />
}

@*Context Menus*@
<TreeObjectContextMenu Add=@OpenAddObjectElementModal Copy=@OpenCopyObjectElementModal ShowPath=@ShowPath Rename=@OpenRenameKeyModal Delete=@OpenDeleteObjectElementModal />
<TreeArrayContextMenu Add=@OpenAddArrayElementModal Copy=@OpenCopyArrayElementModal ShowPath=@ShowPath Rename=@OpenRenameKeyModal Delete=@OpenDeleteArrayElementModal DeleteAll=@OpenDeleteAllArrayElementsModal />
<TreeValueContextMenu ShowPath=@ShowPath Rename=@OpenRenameKeyModal />

@*Modals*@
@if (_addObjectElementModalOpen == true)
{
    <ModalAddObjectElement Path=@_pathFromEventClickArgs OnClose=@OnAddObjectElementModalClose />
}
@if (_copyObjectElementModalOpen == true)
{
    <ModalCopyObjectElement Path=@_pathFromEventClickArgs OnClose=@OnCopyObjectElementModalClose />
}
@if (_deleteObjectElementModalOpen == true)
{
    <ModalDeleteObjectElement Path=@_pathFromEventClickArgs OnClose=@OnDeleteObjectElementModalClose />
}
@if (_addArrayElementModalOpen == true)
{
    // usetemplate if there is an existing array element to copy from
    Tuple<int, string, JToken?> result = jsonFileDataService.AccessData(_pathFromEventClickArgs);
    JArray array = (JArray)result.Item3;
    bool useTemplate = (array.Count != 0) ? true : false;
    <ModalAddArrayElement Path=@_pathFromEventClickArgs UseElementTemplate=@useTemplate OnClose=@OnAddArrayElementModalClose />
}
@if (_copyArrayElementModalOpen == true)
{
    <ModalCopyArrayElement Path=@_pathFromEventClickArgs OnClose=@OnCopyArrayElementModalClose />
}
@if (_renameKeyModalOpen == true)
{
    <ModalRenameKey Path=@_pathFromEventClickArgs OnClose=@OnRenameKeyModalClose />
}
@if (_deleteArrayElementModalOpen == true)
{
    <ModalDeleteArrayElement Path=@_pathFromEventClickArgs OnClose=@OnDeleteArrayElementModalClose />
}
@if (_deleteAllArrayElementsModalOpen == true)
{
    <ModalDeleteAllElements Path=@_pathFromEventClickArgs OnClose=@OnDeleteAllArrayElementsModalClose />
}

@code {
    protected string _path = "";

    private bool _isExpanded = false;

    private string? _pathFromEventClickArgs;

    protected override void OnInitialized()
    {
        // if file has not been set, prevent the loading bar from loading endlessly byt navigating back to the importer
        if (!jsonFileDataService.IsFileSet())
        {
            navManager.NavigateTo("/");
        }
    }

    public void ParentStateChange() => StateHasChanged();

    private void UndoChanges()
    {
        jsonFileDataService.UndoAllChanges();
    }

    private async Task ToggleFolding()
    {
        if (_isExpanded == true)
        {
            await jsRuntime.InvokeVoidAsync("TREE_FUNCTIONS.collapseAll");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("TREE_FUNCTIONS.expandAll");
        }
        _isExpanded = !_isExpanded;
    }

    private async Task DownloadFile()
    {
        var fileStream = jsonFileDataService.GetFileAsMemoryStream();
        var fileName = jsonFileDataService.GetFileName();

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await jsRuntime.InvokeVoidAsync("TREE_FUNCTIONS.downloadFileFromStream", fileName, streamRef);
    }

    private void ShowPath(ItemClickEventArgs e)
    {
        // get the path from the passed data
        string path = e.Data as string;

        toastService.ShowInfo($"Path: {path}");
    }

    // ======= Rename  Element Modal ======================
    private bool _renameKeyModalOpen = false;

    private void OpenRenameKeyModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;

        // open modal
        _renameKeyModalOpen = true;
    }

    private void OnRenameKeyModalClose() => _renameKeyModalOpen = false;
    // ====================================================

    // ========== Add Object Element Modal ================
    private bool _addObjectElementModalOpen = false;

    private void OpenAddObjectElementModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _addObjectElementModalOpen = true;
    }

    private void OnAddObjectElementModalClose() => _addObjectElementModalOpen = false;
    // ====================================================

    // ========== Copy Object Element Modal ===============
    private bool _copyObjectElementModalOpen = false;

    private void OpenCopyObjectElementModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _copyObjectElementModalOpen = true;
    }

    private void OnCopyObjectElementModalClose() => _copyObjectElementModalOpen = false;
    // ====================================================

    // ========== Delete Object Element Modal =============
    private bool _deleteObjectElementModalOpen = false;

    private void OpenDeleteObjectElementModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _deleteObjectElementModalOpen = true;
    }

    private void OnDeleteObjectElementModalClose() => _deleteObjectElementModalOpen = false;
    // ====================================================

    // ======= Add Array Element Modal ====================
    private bool _addArrayElementModalOpen = false;

    private void OpenAddArrayElementModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _addArrayElementModalOpen = true;
        StateHasChanged();
    }

    private void OnAddArrayElementModalClose() => _addArrayElementModalOpen = false;
    // ====================================================

    // ======= Copy Array Element Modal ===================
    private bool _copyArrayElementModalOpen = false;

    private void OpenCopyArrayElementModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _copyArrayElementModalOpen = true;
        StateHasChanged();
    }

    private void OnCopyArrayElementModalClose() => _copyArrayElementModalOpen = false;
    // ====================================================

    // ======= Delete Array Element Modal =================
    private bool _deleteArrayElementModalOpen = false;

    private void OpenDeleteArrayElementModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _deleteArrayElementModalOpen = true;
        StateHasChanged();
    }

    private void OnDeleteArrayElementModalClose() => _deleteArrayElementModalOpen = false;
    // ====================================================

    // ======= Delete Array Elements Modal =================
    private bool _deleteAllArrayElementsModalOpen = false;

    private void OpenDeleteAllArrayElementsModal(ItemClickEventArgs e)
    {
        // get the path from the passed data
        _pathFromEventClickArgs = e.Data as string;
        // when modal opened...
        _deleteAllArrayElementsModalOpen = true;
        StateHasChanged();
    }

    private void OnDeleteAllArrayElementsModalClose() => _deleteAllArrayElementsModalOpen = false;
    // ====================================================
}
